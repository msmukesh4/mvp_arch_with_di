package com.youtube.dryrun.testmvparchitecture.di.component;

import android.app.Application;
import android.content.Context;

import com.youtube.dryrun.testmvparchitecture.TestMvpApplication;
import com.youtube.dryrun.testmvparchitecture.data.DataManager;
import com.youtube.dryrun.testmvparchitecture.data.db.DbHelper;
import com.youtube.dryrun.testmvparchitecture.data.prefs.PreferenceHelper;
import com.youtube.dryrun.testmvparchitecture.di.ApplicationContext;
import com.youtube.dryrun.testmvparchitecture.di.module.ApplicationModule;

import javax.inject.Singleton;

import dagger.Component;

/**
 * A @Component annotated interface defines the connection between
 * the provider of objects (modules) and the objects which express
 * a dependency. The class for this connection is generated by the Dagger
 *
 * We may ask that the DataManager will then be created with each
 * Activity. But that is not true because we have annotated the
 * DataManager class with @Singleton. Which brings the class in
 * the global scope and thus is accessed whenever a dependency is expressed.
 */

@Singleton
@Component(modules = ApplicationModule.class)
public interface ApplicationComponent {

    void inject(TestMvpApplication testMvpApplication);

//    @ApplicationContext
//    Context context();
//
//    Application getApplication();
//
//    DataManager getDataManager();

}
